const axios = require('axios');
const sendMessage = require('../handles/sendMessage'); // Importer la fonction sendMessage

// Stocker l'√©tat du quiz pour chaque utilisateur
const quizState = {};

module.exports = async (senderId, prompt) => {
    try {
        // Si l'utilisateur demande un quiz
        if (prompt.trim().toLowerCase() === 'quiz') {
            // Envoyer un message de confirmation que le message a √©t√© re√ßu
            await sendMessage(senderId, "Message re√ßu, je pr√©pare une r√©ponse...");
            
            // Appeler l'API pour obtenir une question de quiz
            const apiUrl = 'https://opentdb.com/api.php?amount=1&type=multiple';
            const response = await axios.get(apiUrl);

            // R√©cup√©rer les donn√©es de la question
            const questionData = response.data.results[0];
            const question = questionData.question;
            const correctAnswer = questionData.correct_answer;
            const incorrectAnswers = questionData.incorrect_answers;

            // Cr√©er une liste des r√©ponses possibles
            const options = [correctAnswer, ...incorrectAnswers].sort(() => Math.random() - 0.5);

            // Stocker l'√©tat du quiz pour cet utilisateur
            quizState[senderId] = {
                question: question,
                correctAnswer: correctAnswer,
                options: options
            };

            // Envoyer la question et les options √† l'utilisateur
            const optionsText = options.map((opt, index) => `${index + 1}. ${opt}`).join('\n');
            await sendMessage(senderId, `Voici votre question de quiz :\n${question}\nChoisissez une r√©ponse :\n${optionsText}`);
        } else {
            // V√©rifier si l'utilisateur a d√©j√† demand√© un quiz
            const currentQuiz = quizState[senderId];
            if (currentQuiz) {
                // V√©rifier la r√©ponse de l'utilisateur
                const userAnswerIndex = parseInt(prompt.trim()) - 1;
                if (userAnswerIndex >= 0 && userAnswerIndex < currentQuiz.options.length) {
                    const userAnswer = currentQuiz.options[userAnswerIndex];
                    // Envoyer un message d'attente
                    await sendMessage(senderId, "üá≤üá¨ *Bruno* r√©dige sa r√©ponse... un instant, s'il vous pla√Æt üçü");

                    // V√©rifier si la r√©ponse est correcte
                    if (userAnswer === currentQuiz.correctAnswer) {
                        await sendMessage(senderId, "‚úÖ R√©ponse correcte !");
                    } else {
                        await sendMessage(senderId, `‚ùå R√©ponse incorrecte. La bonne r√©ponse est : ${currentQuiz.correctAnswer}.`);
                    }

                    // Appeler √† nouveau l'API pour obtenir une nouvelle question
                    const apiUrl = 'https://opentdb.com/api.php?amount=1&type=multiple';
                    const response = await axios.get(apiUrl);
                    const newQuestionData = response.data.results[0];
                    const newQuestion = newQuestionData.question;
                    const newCorrectAnswer = newQuestionData.correct_answer;
                    const newIncorrectAnswers = newQuestionData.incorrect_answers;
                    const newOptions = [newCorrectAnswer, ...newIncorrectAnswers].sort(() => Math.random() - 0.5);

                    // Mettre √† jour l'√©tat du quiz
                    quizState[senderId] = {
                        question: newQuestion,
                        correctAnswer: newCorrectAnswer,
                        options: newOptions
                    };

                    // Envoyer la nouvelle question √† l'utilisateur
                    const newOptionsText = newOptions.map((opt, index) => `${index + 1}. ${opt}`).join('\n');
                    await sendMessage(senderId, `Voici votre nouvelle question de quiz :\n${newQuestion}\nChoisissez une r√©ponse :\n${newOptionsText}`);
                } else {
                    await sendMessage(senderId, "Veuillez envoyer un num√©ro valide pour votre r√©ponse.");
                }
            } else {
                await sendMessage(senderId, "Veuillez d'abord demander un quiz en envoyant 'quiz'.");
            }
        }
    } catch (error) {
        console.error('Erreur lors de l\'appel √† l\'API de quiz:', error);
        await sendMessage(senderId, "D√©sol√©, une erreur s'est produite lors du traitement de votre message.");
    }
};
