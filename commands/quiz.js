const axios = require('axios');
const sendMessage = require('../handles/sendMessage');

// Stocker la question et la r√©ponse correcte pour chaque utilisateur
const userQuizData = {};

module.exports = async (senderId, prompt) => {
    // Si l'utilisateur envoie "quiz", obtenir une nouvelle question
    if (prompt.trim().toLowerCase() === 'quiz') {
        try {
            // Appel √† l'API Open Trivia Database pour obtenir une question de quiz
            const apiUrl = 'https://opentdb.com/api.php?amount=1&type=multiple';
            const response = await axios.get(apiUrl);
            const questionData = response.data.results[0];

            // Extraire les informations de la question
            const question = questionData.question;
            const correctAnswer = questionData.correct_answer;
            const incorrectAnswers = questionData.incorrect_answers;

            // M√©langer les r√©ponses (correcte + incorrectes)
            const answers = [...incorrectAnswers, correctAnswer].sort(() => Math.random() - 0.5);

            // Stocker la question et la r√©ponse correcte pour l'utilisateur
            userQuizData[senderId] = {
                correctAnswer: correctAnswer,
                answers: answers
            };

            // Construire le message de la question avec les options
            let message = `üß† *Question Quiz :*\n${question}\n\n`;
            answers.forEach((answer, index) => {
                message += `${index + 1}. ${answer}\n`; // Afficher les r√©ponses avec les num√©ros
            });

            // Envoyer la question √† l'utilisateur
            await sendMessage(senderId, message);
        } catch (error) {
            console.error('Erreur lors de l\'appel √† l\'API Open Trivia Database:', error);
            await sendMessage(senderId, "D√©sol√©, une erreur s'est produite lors de la r√©cup√©ration du quiz.");
        }
        return;
    }

    // V√©rifier si l'utilisateur a r√©pondu par un num√©ro (1, 2, 3 ou 4)
    const userResponse = parseInt(prompt.trim());
    if (!isNaN(userResponse) && userQuizData[senderId]) {
        const userData = userQuizData[senderId];
        const selectedAnswer = userData.answers[userResponse - 1]; // Obtenir la r√©ponse choisie

        if (selectedAnswer === userData.correctAnswer) {
            // R√©ponse correcte
            await sendMessage(senderId, "‚úÖ R√©ponse correcte ! Bien jou√© üéâ");
        } else {
            // R√©ponse incorrecte, envoyer la correction
            await sendMessage(senderId, `‚ùå R√©ponse incorrecte. La bonne r√©ponse √©tait : *${userData.correctAnswer}*`);
        }

        // Supprimer les donn√©es de quiz pour l'utilisateur apr√®s la r√©ponse
        delete userQuizData[senderId];
    } else if (!userQuizData[senderId]) {
        // Si l'utilisateur n'a pas encore demand√© de quiz, ou les donn√©es de quiz ne sont pas disponibles
        await sendMessage(senderId, "Veuillez d'abord demander un quiz en envoyant 'quiz'.");
    } else {
        // Si l'utilisateur n'a pas envoy√© une r√©ponse valide
        await sendMessage(senderId, "Veuillez r√©pondre avec un num√©ro entre 1 et 4.");
    }
};
